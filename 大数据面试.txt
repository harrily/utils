一、大数据相关组件，  深入了解需要问的问题。
	1、集群搭建以及组件原理
		Hadoop：
			-、MR的Shuffle过程
			-、Yarn的工作机制，以及MR Job提交运行过程
			-、HDFS写入过程
			-、namenode的HA实现
			-、HDFS写入过程客户端奔溃怎么处理？
		ZK：
			-、Zookeeper的leader选举过程
			-、简述paxos算法
			-、Zookeeper如何保证数据的一致性？
			-、Zookeeper在yarn框架中如何实现避免脑裂的?
		HIVE:
			-、Hive分区过多有何坏处以及分区时的注意事项
			-、hive分桶？
			-、Hive中复杂数据类型的使用好处与坏处
			-、Hive元数据库是用来做什么的，存储哪些信息？
			-、Hive什么情况下可以避免进行mapreduce？
			-、Hive MapJoin?	
			-、Hive的sort by, order by, distribute by, cluster by区别？
			-、Hive优化常用手段
			-、数据倾斜改怎么优化？
			-、Hive，行专列怎么实现？开窗函数有了解吗?
			-、UDF如何实现？UDAF？
		SPARK：
			-、Spark的运行模式
			-、Spark和MapReduce的区别
			-、RDD是如何容错的？
			-、Spark的Stage是怎么划分的？如何优化？
			-、Spark执行任务流程（standalone、yarn）
				
		Kettle：
			-、怎么实现任务有序进行？
			-、数据抽取失败怎么恢复？
		Flume:
			-、Flume怎么实时监听文件夹

二、数据库建模相关知识	
	1、数据建模
		-、数据仓库和数据库有什么区别？
			(事务性数据库和决策支持数据库的区别，当然包括目标、用途、设计等等)
			（1）数据是面向事务处的，数据是由日常的业务产生的，常更新；数据仓库是面向主题的,数据来源于数据库或文件，经过一定的规则转换得到，用来分析的。
			（2）数据库一般是用来存储当前交易数据；数据仓库存储一般存储的是历史数据。
			（3）数据库的设计一般是符合三范式的，有最大的精确度和最小的冗余度，有利于数据的插入；数据仓库的设计一般是星型的，有利于查询。

		-、 有哪几种模型设计方法？特点分别是什么？
			-、范式建模法（Third Normal Form，3NF）
				-、每个属性值唯一，不具有多义性 ;
				-、每个非主属性必须完全依赖于整个主键，而非主键的一部分 ;
				-、每个非主属性不能依赖于其他关系中的属性，因为这样的话，这种属性应该归到其他关系中去。
			-、维度建模法
				-、按照事实表，维表来构建数据仓库，数据集市。这种方法的最被人广泛知晓的名字就是星型模式（Star-schema）。
		-、模型设计的思路？业务需求驱动？数据驱动？
				构造数据仓库有两种方式：一是自上而下，一是自下而上。
				 -、Bill Inmon先生推崇“自上而下”的方式，即一个企业建立唯一的数据中心，就像一个数据的仓库，其中数据是经过整合、经过清洗、去掉脏数据的、标准的，能够提供统一的视图。要建立这样的数据仓库，并不从它需要支持哪些应用入手，而是要从整个企业的环境入手，分析其中的概念，应该有什么样的数据，达成概念完成整；（会考虑到很全面的设计）
				 -、 Ralph Kimball先生推崇“自下而上”的方式，他认为建设数据仓库应该按照实际的应用需求，加载需要的数据，不需要的数据不要加载到数据仓库中。这种方式建设周期较短，客户能够很快看到结果。（针对客户的需求，需求要什么就做什么）
				二者都要达到同一个目标：企业级数据仓库。实际上在建设数据仓库的时候，一般都参照这两种方式结合使用没有硬性规定
		-、模型设计的步骤？
				一、 确定主题
				二、 确定量度
				三、 确定事实数据粒度
				四、 确定维度
				五、 创建事实表
			
三、算法&高级算法
	1简单算法：
		-、二叉排序树的删除操作	
			-、叶子节点；(直接删除即可)
			-、仅有左或右子树的节点；（上移子树即可）
			-、左右子树都有的节点。( 用删除节点的直接前驱或者直接后继来替换当前节点，调整直接前驱或者直接后继的位置)
		-、排序算法比较
			-、快排：
				（1）算法思想
				选择一个基准元素，将比基准元素小的元素放在其前面，比基准元素大的元素放在其后面，然后在将小于基准值元素的子数列和大于基准元素的子数列按原来的方法排序，直到整个序列有序;
				（2）优缺点
					优点：极快数据移动少；
					缺点：不稳定；
				（3）效率分析
					此排序算法的效率在序列越乱的时候，效率越高。在数据有序时，会退化成冒泡排序；
				（4）对于基准的选择
			-、归并,插入，选择，二分法等。 主要看面试人是否熟悉，算法原理
	2高级算法：
		1、贝叶斯，随机树，随机森林， 协同过滤，随机森林等。
		主要看面试人是否了解算法原理，是否使用过。

四、开发语言相关
	JAVA
		-、JVM内存布局原理、JVM垃圾回收机制、JVM垃圾回收算法
		-、GC排查
		-、HashMAP和HashTable区别，
		-、多线程编程
		-、NIO
		-、TCP和UDP区别
		-、队列，数组，栈，链表都有什么特性，有什么区别
		-、Spring了解过吗，面向切面编程有了解过吗？
		-、Mybatis，Hibernate等连接数据库的组件使用过吗？
		-、微服务有了解过吗？
		-、docker是否了解？
	Python:
		-、lamba 函数是否会使用，
		-、爬虫
		-、python算法库是否了解过
	
	
整体思路：
	1、技术相关，由浅入深， 深入的了解即可， 基本的需要熟悉。
	2、面试人是否有独立思考能力，是否热爱钻研技术
	